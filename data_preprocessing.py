# -*- coding: utf-8 -*-
"""RA2011026010024_Sushmitha_data_preprocessing_assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1368Is9yALCRpXo-6Av_ZIgW01dCTA6Kn
"""

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

dataset = pd.read_csv("/content/drive/MyDrive/Life_Expectancy.csv")

# display the first five observations
# type your code here
df = pd.DataFrame(dataset)
df.head(5)

# check the size of the dataframe
# type your code here
df.size

df.shape

# display dataset information understand the dataset# display dataset information understand the dataset


# type your code here
df.info

# type your code here
df.info

#The dataset gives the life expectancy for different countries. 
#Check if any information about life expectancy is missing from the given records. 
#How do we fix the problem if present?
dataset.isnull().sum()

X = dataset[['Adult_Mortality']]
Y = dataset['Expected']

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=101)

X_train

X_test

Y_train

Y_test

from sklearn.linear_model import LinearRegression

lm = LinearRegression()

lm.fit(X_train,Y_train)

predictions = lm.predict(X_test)

predictions

Y_test

import matplotlib.pyplot as plt
plt.scatter(X,Y

plt.scatter(X_test,Y_test)

plt.scatter(X_test,predictions)

print(lm.intercept_)

print(lm.coef_)

yy= (lm.coef_) * X + (lm.intercept_)
round(yy,0)


plt.plot(X,yy)
plt.scatter(X,Y)

from sklearn.metrics import classification_report

Y_test

predictions

from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(Y_test, predictions))
print('MSE:', metrics.mean_squared_error(Y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(Y_test, predictions)))

#How do we handle the missing values from the entire dataset?

#We handle missing values by using mean, median or mode functions to replace the null values.
#